.animated_section {
  opacity: 0;
  transition:
    opacity var(--animation-duration, 0.6s) ease-out var(--animation-delay, 0ms),
    transform var(--animation-duration, 0.6s) ease-out var(--animation-delay, 0ms);

  // Состояние без анимации - элемент сразу видимый
  &.no_animation {
    opacity: 1;
    transform: none !important;
  }

  // Состояние видимости для анимированных элементов
  // Используем глобальный класс visible вместо модульного
  &:global(.visible),
  &.visible {
    opacity: 1;
  }

  // Fade In Up Animation
  &.fadeInUp {
    transform: translateY(40px);

    &:global(.visible),
    &.visible {
      transform: translateY(0);
    }
  }

  // Fade In Down Animation
  &.fadeInDown {
    transform: translateY(-40px);

    &:global(.visible),
    &.visible {
      transform: translateY(0);
    }
  }

  // Fade In Left Animation
  &.fadeInLeft {
    transform: translateX(-40px);

    &:global(.visible),
    &.visible {
      transform: translateX(0);
    }
  }

  // Fade In Right Animation
  &.fadeInRight {
    transform: translateX(40px);

    &:global(.visible),
    &.visible {
      transform: translateX(0);
    }
  }

  // Fade In Animation
  &.fadeIn {
    transform: none;

    &:global(.visible),
    &.visible {
      transform: none;
    }
  }

  // Scale In Animation
  &.scaleIn {
    transform: scale(0.8);

    &:global(.visible),
    &.visible {
      transform: scale(1);
    }
  }
}

// CSS-only анимации через @keyframes для максимальной производительности
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(40px);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInDown {
  from {
    opacity: 0;
    transform: translateY(-40px);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInLeft {
  from {
    opacity: 0;
    transform: translateX(-40px);
  }

  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes fadeInRight {
  from {
    opacity: 0;
    transform: translateX(40px);
  }

  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}

@keyframes scaleIn {
  from {
    opacity: 0;
    transform: scale(0.8);
  }

  to {
    opacity: 1;
    transform: scale(1);
  }
}

// CSS-only классы для анимаций
.animated_section {
  &.css_fadeInUp {
    animation: fadeInUp var(--animation-duration, 0.6s) ease-out var(--animation-delay, 0ms) forwards;
  }

  &.css_fadeInDown {
    animation: fadeInDown var(--animation-duration, 0.6s) ease-out var(--animation-delay, 0ms) forwards;
  }

  &.css_fadeInLeft {
    animation: fadeInLeft var(--animation-duration, 0.6s) ease-out var(--animation-delay, 0ms) forwards;
  }

  &.css_fadeInRight {
    animation: fadeInRight var(--animation-duration, 0.6s) ease-out var(--animation-delay, 0ms) forwards;
  }

  &.css_fadeIn {
    animation: fadeIn var(--animation-duration, 0.6s) ease-out var(--animation-delay, 0ms) forwards;
  }

  &.css_scaleIn {
    animation: scaleIn var(--animation-duration, 0.6s) ease-out var(--animation-delay, 0ms) forwards;
  }
}

// Staggered animation for child elements
.animated_section:global(.visible),
.animated_section.visible {
  .stagger-child {
    &:nth-child(1) {
      animation-delay: 0ms;
    }

    &:nth-child(2) {
      animation-delay: 100ms;
    }

    &:nth-child(3) {
      animation-delay: 200ms;
    }

    &:nth-child(4) {
      animation-delay: 300ms;
    }

    &:nth-child(5) {
      animation-delay: 400ms;
    }

    &:nth-child(6) {
      animation-delay: 500ms;
    }
  }
}

// Reduce animations for users who prefer reduced motion
@media (prefers-reduced-motion: reduce) {
  .animated_section {
    transition: opacity 0.3s ease-out;
    transform: none !important;
    animation: none !important;

    &:global(.visible),
    &.visible {
      transform: none !important;
    }
  }
}